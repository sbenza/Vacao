package com.example.vacao;

import java.util.List;
import com.example.vacao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table BULL_ORIGIN.
 */
public class BullOrigin {

    private Long id;
    private String stamp;
    private String company;
    private String color;
    private String name;
    private String breed;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BullOriginDao myDao;

    private List<InseminationControl> inseminationControlList;

    public BullOrigin() {
    }

    public BullOrigin(Long id) {
        this.id = id;
    }

    public BullOrigin(Long id, String stamp, String company, String color, String name, String breed) {
        this.id = id;
        this.stamp = stamp;
        this.company = company;
        this.color = color;
        this.name = name;
        this.breed = breed;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBullOriginDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getStamp() {
        return stamp;
    }

    public void setStamp(String stamp) {
        this.stamp = stamp;
    }

    public String getCompany() {
        return company;
    }

    public void setCompany(String company) {
        this.company = company;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getBreed() {
        return breed;
    }

    public void setBreed(String breed) {
        this.breed = breed;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<InseminationControl> getInseminationControlList() {
        if (inseminationControlList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InseminationControlDao targetDao = daoSession.getInseminationControlDao();
            List<InseminationControl> inseminationControlListNew = targetDao._queryBullOrigin_InseminationControlList(id);
            synchronized (this) {
                if(inseminationControlList == null) {
                    inseminationControlList = inseminationControlListNew;
                }
            }
        }
        return inseminationControlList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetInseminationControlList() {
        inseminationControlList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
