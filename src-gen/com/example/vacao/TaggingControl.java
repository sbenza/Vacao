package com.example.vacao;

import com.example.vacao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TaggingControl.
 */
public class TaggingControl {

    private Long id;
    private String comment;
    private java.util.Date date;
    private long cattleId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TaggingControlDao myDao;

    private Cattle cattle;
    private Long cattle__resolvedKey;


    public TaggingControl() {
    }

    public TaggingControl(Long id) {
        this.id = id;
    }

    public TaggingControl(Long id, String comment, java.util.Date date, long cattleId) {
        this.id = id;
        this.comment = comment;
        this.date = date;
        this.cattleId = cattleId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTaggingControlDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public long getCattleId() {
        return cattleId;
    }

    public void setCattleId(long cattleId) {
        this.cattleId = cattleId;
    }

    /** To-one relationship, resolved on first access. */
    public Cattle getCattle() {
        long __key = this.cattleId;
        if (cattle__resolvedKey == null || !cattle__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CattleDao targetDao = daoSession.getCattleDao();
            Cattle cattleNew = targetDao.load(__key);
            synchronized (this) {
                cattle = cattleNew;
            	cattle__resolvedKey = __key;
            }
        }
        return cattle;
    }

    public void setCattle(Cattle cattle) {
        if (cattle == null) {
            throw new DaoException("To-one property 'cattleId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.cattle = cattle;
            cattleId = cattle.getId();
            cattle__resolvedKey = cattleId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
