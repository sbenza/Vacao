package com.example.vacao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.vacao.Cattle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CATTLE.
*/
public class CattleDao extends AbstractDao<Cattle, Long> {

    public static final String TABLENAME = "CATTLE";

    /**
     * Properties of entity Cattle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Stamp = new Property(1, String.class, "stamp", false, "STAMP");
        public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
        public final static Property Color = new Property(3, String.class, "color", false, "COLOR");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Tag = new Property(5, String.class, "tag", false, "TAG");
        public final static Property Horn = new Property(6, String.class, "horn", false, "HORN");
        public final static Property Breed = new Property(7, String.class, "breed", false, "BREED");
    };

    private DaoSession daoSession;


    public CattleDao(DaoConfig config) {
        super(config);
    }
    
    public CattleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CATTLE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'STAMP' TEXT NOT NULL ," + // 1: stamp
                "'COMMENT' TEXT," + // 2: comment
                "'COLOR' TEXT," + // 3: color
                "'TYPE' TEXT," + // 4: type
                "'TAG' TEXT," + // 5: tag
                "'HORN' TEXT," + // 6: horn
                "'BREED' TEXT);"); // 7: breed
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CATTLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cattle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getStamp());
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(3, comment);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(4, color);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(6, tag);
        }
 
        String horn = entity.getHorn();
        if (horn != null) {
            stmt.bindString(7, horn);
        }
 
        String breed = entity.getBreed();
        if (breed != null) {
            stmt.bindString(8, breed);
        }
    }

    @Override
    protected void attachEntity(Cattle entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cattle readEntity(Cursor cursor, int offset) {
        Cattle entity = new Cattle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // stamp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // color
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tag
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // horn
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // breed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cattle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStamp(cursor.getString(offset + 1));
        entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setColor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTag(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHorn(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBreed(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cattle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cattle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
